<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">A sea of code</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000/" />
<updated>2014-05-09T01:26:35-04:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Damian Schenkelman</name>
  <uri>http://localhost:4000/</uri>
  <email>you@email.com</email>
</author>


<entry>
  <title type="html"><![CDATA[[Spanish] Desarrollo multi-plataforma con Visual Studio 2013 e introducción a Xamarin (en español)]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2014/01/07/spanish-desarrollo-multi-plataforma-con-visual-studio-2013-e-introduccin-a-xamarin-en-espaol/"/>
  <id>http://localhost:4000/2014/01/07/spanish-desarrollo-multi-plataforma-con-visual-studio-2013-e-introduccin-a-xamarin-en-espaol</id>
  <published>2014-01-07T00:00:00-05:00</published>
  <updated>2014-01-07T00:00:00-05:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;For those who don’t read Spanish, this blog post provides details about the Visual Studio 2013 launch for Latin America, particulary a cross-platform development talk that included Xamarin.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;El Miércoles 11 de Diciembre, en las oficinas de Microsoft Argentina, se realizó el lanzamiento de &lt;a href=&quot;http://www.visualstudio.com/es-es/visual-studio-homepage-vs.aspx&quot;&gt;Visual Studio 2013&lt;/a&gt;. Las sesiones del mismo fueron filmadas para hacerlas disponibles a toda latinoamérica (aquí están las otras &lt;a href=&quot;http://channel9.msdn.com/Blogs/DevWow/Lanzamiento-Visual-Studio-2013-Keynote-Tranformando-el-desarrollo-de-software-en-un-mundo-de-servici&quot;&gt;#1&lt;/a&gt;, &lt;a href=&quot;http://channel9.msdn.com/Blogs/DevWow/Lanzamiento-Visual-Studio-2013-Aprovechando-la-Nube-en-el-Desarrollo-de-Aplicaciones-Modernas&quot;&gt;#2&lt;/a&gt;). Junto con mis amigos &lt;a href=&quot;http://blogs.msdn.com/b/aschapiro/&quot;&gt;Ariel Schapiro&lt;/a&gt; y &lt;a href=&quot;http://blogs.southworks.net/mconverti/&quot;&gt;Mariano Converti&lt;/a&gt; tuvimos la oportunidad de presentar una &lt;a href=&quot;http://channel9.msdn.com/Blogs/DevWow/Lanzamiento-Visual-Studio-2013-Aplicaciones-multi-plataforma&quot;&gt;sesión relacionada &lt;/a&gt;&lt;a href=&quot;http://channel9.msdn.com/Blogs/DevWow/Lanzamiento-Visual-Studio-2013-Aplicaciones-multi-plataforma&quot;&gt;con el desarrollo multi-plataforma&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2014/01/pic.png&quot;&gt;&lt;img class=&quot;alignnone&quot; style=&quot;border: 0px none&quot; title=&quot;pic&quot; alt=&quot;pic&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2014/01/pic_thumb.png&quot; width=&quot;235&quot; height=&quot;244&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Durante la misma hicimos un repaso por los pasos por los que una aplicación multi-plataforma puede ir evolucionando, desde el uso de ASP.NET MVC con CSS media queries, pasando por opciones como &lt;a href=&quot;http://phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt; o &lt;a href=&quot;http://www.appcelerator.com/titanium/titanium-sdk/&quot;&gt;Titanium&lt;/a&gt; y llegando finalmente a una aplicación nativa.&lt;/p&gt;
&lt;p&gt;En esta última parte realizamos una introducción bastante completa sobre Xamarin que me parece un recurso muy útil para la comunidad hispanoparlante (comienza en 25:11 para aquellos solo interesados en Xamarin). Algunos de los temas discutidos, entre diapositivas y varias demos, fueron los siguientes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Qué es Xamarin?&lt;/li&gt;
&lt;li&gt;Cuáles son sus beneficios?&lt;/li&gt;
&lt;li&gt;Cómo funciona?&lt;/li&gt;
&lt;li&gt;Cómo empezar a desarrollar una aplicación?&lt;/li&gt;
&lt;li&gt;Cuáles son las posibilidad y recomendaciones para compartir código?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Al final de la charla hubo una sesión de preguntas y respuestas en la cual hubo preguntas muy interesantes. Esperamos que les pueda ser útil en caso de estar comenzando a aprender sobre Xamarin.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2014/01/07/spanish-desarrollo-multi-plataforma-con-visual-studio-2013-e-introduccin-a-xamarin-en-espaol/&quot;&gt;[Spanish] Desarrollo multi-plataforma con Visual Studio 2013 e introducción a Xamarin (en español)&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on January 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[scriptcs: Acceptance tests with XBehave.net]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/12/25/scriptcs-acceptance-tests-with-xbehave-net/"/>
  <id>http://localhost:4000/2013/12/25/scriptcs-acceptance-tests-with-xbehave-net</id>
  <published>2013-12-25T00:00:00-05:00</published>
  <updated>2013-12-25T00:00:00-05:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;One of the challenges we face when merging pull requests in &lt;a href=&quot;https://github.com/scriptcs/scriptcs&quot;&gt;scriptcs&lt;/a&gt; is making sure all features are still working. Executing our unit tests for every pull request definitely helps as it helps catch many mistakes, but some others go unnoticed due to integration issues (different components, the file server, assembly versions).&lt;/p&gt;
&lt;p&gt;Fortunately, scriptcs is something that can be easily tested as it does not have any external dependencies (other than &lt;a href=&quot;http://www.nuget.org/&quot;&gt;NuGet&lt;/a&gt;) such as databases, web services, etc. That&#39;s why we decided to create some &lt;a href=&quot;https://github.com/scriptcs/scriptcs/issues/428&quot;&gt;acceptance tests&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;An initial approach&lt;/h2&gt;
&lt;p&gt;Running &lt;span style=&quot;font-family: Consolas&quot;&gt;scriptcs –install &lt;/span&gt;takes a packages.config in the current working directory and installs all the packages specified in it. The first attempt at testing this was the following one:&lt;/p&gt;
&lt;code data-gist-id=&quot;8124109&quot; data-gist-file=&quot;InitialTest.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;The above sample uses &lt;a href=&quot;http://xunit.codeplex.com/&quot;&gt;XUnit&lt;/a&gt;, takes advantage of the Dispose method to do cleanup and verifies that the correct packages are installed. Nevertheless, we can take this for another spin to see if we can get a test that is even easier to read.&lt;/p&gt;
&lt;h2&gt;Enter XBehave&lt;/h2&gt;
&lt;p align=&quot;left&quot;&gt;After making the above sample available through Twitter for feedback &lt;a href=&quot;https://twitter.com/gblock&quot;&gt;@glennblock&lt;/a&gt; brought &lt;a href=&quot;http://xbehave.github.io/&quot;&gt;XBehave&lt;/a&gt; into the table, which is being used in his (and other&#39;s) &lt;a href=&quot;http://chimera.labs.oreilly.com/books/1234000001708/ch08.html#_feature_retrieving_issues&quot;&gt;Web API book&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/dschenkelman&quot;&gt;@dschenkelman&lt;/a&gt; &lt;a href=&quot;https://twitter.com/scriptcsnet&quot;&gt;@scriptcsnet&lt;/a&gt; have you seen XBehave?&lt;/p&gt;
&lt;p&gt;— Glenn Block (@gblock) &lt;a href=&quot;https://twitter.com/gblock/statuses/415629455218835457&quot;&gt;December 24, 2013&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;From its &lt;a href=&quot;https://github.com/xbehave/xbehave.net&quot;&gt;GitHub site&lt;/a&gt; XBehave is&lt;em&gt; A BDD/TDD framework based on xUnit .net and inspired by Gherkin.&lt;/em&gt; The goal of this blog post is not to explain how to use XBehave, but if you are interested &lt;a href=&quot;http://xbehave.github.io/&quot;&gt;this site&lt;/a&gt; has a quickstart page and some useful docs to get you started with it.&lt;/p&gt;
&lt;p&gt;The nice thing about it, is that you can write a spec using plain text and then map that to actual code. For example, the spec for this feature could be something like this:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; a current working directory&lt;br /&gt;
And a packages.config file located in the current directory&lt;br /&gt;
&lt;strong&gt;   When&lt;/strong&gt; the packages are installed&lt;br /&gt;
&lt;strong&gt;       Then&lt;/strong&gt; the program executes successfully&lt;br /&gt;
And a packages directory is created inside the working directory&lt;br /&gt;
And a directory for the package and each of its dependencies is created&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The resulting test case is the following one:&lt;/p&gt;
&lt;code data-gist-id=&quot;8124109&quot; data-gist-file=&quot;XBehaveTest.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;p&gt;The things I like better about the XBehave test are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Teardown method is closer to the code that creates the items that must be cleaned up.&lt;/li&gt;
&lt;li&gt;Each line of code is placed within the related spec string. Before they could be anywhere, but having the strings in there helped me realized where it made better sense to put them.&lt;/li&gt;
&lt;li&gt;The scenario under test is easier to understand for everyone reading the test.&lt;/li&gt;
&lt;/ol&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/12/25/scriptcs-acceptance-tests-with-xbehave-net/&quot;&gt;scriptcs: Acceptance tests with XBehave.net&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on December 25, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[scriptcs: Reducing startup time by caching compiled .dlls]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/12/04/scriptcs-reducing-startup-time-by-caching-compiled-dlls/"/>
  <id>http://localhost:4000/2013/12/04/scriptcs-reducing-startup-time-by-caching-compiled-dlls</id>
  <published>2013-12-04T00:00:00-05:00</published>
  <updated>2013-12-04T00:00:00-05:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;A &lt;a href=&quot;https://github.com/scriptcs/scriptcs/pull/485#issuecomment-27433217&quot;&gt;couple of weeks ago&lt;/a&gt; we introduced a new &lt;a href=&quot;https://github.com/scriptcs/scriptcs&quot;&gt;scriptcs&lt;/a&gt; feature (available through the nightly builds) that allows you to execute your scripts, compile them to a .dll, and store it in a hidden folder for caching purposes. This greatly reduces start-up time (although there is still room for improvement) as we execute the .dll if it is available, thus avoiding some steps that we would need to perform otherwise.&lt;/p&gt;
&lt;p&gt;We have created an &lt;a href=&quot;https://github.com/scriptcs/scriptcs/wiki/Compiling-%28and-caching%29-to-a-.dll&quot; target=&quot;_blank&quot;&gt;article in the wiki&lt;/a&gt; that explains how the feature works and goes over some ideas for future improvements.&lt;/p&gt;
&lt;p&gt;If you get the chance, please try the feature out as we would like to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get your feedback as to how you are using it to keep improving the experience&lt;/li&gt;
&lt;li&gt;Know if there are any bugs/issues that you encounter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any ideas go ahead and create a &lt;a href=&quot;https://github.com/scriptcs/scriptcs/issues/new&quot; target=&quot;_blank&quot;&gt;new issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Have fun scripting!!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/12/04/scriptcs-reducing-startup-time-by-caching-compiled-dlls/&quot;&gt;scriptcs: Reducing startup time by caching compiled .dlls&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on December 04, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Asynchronous I/O in C#: Why tasks (a.k.a. promises, futures)?]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/11/29/asynchronous-io-in-c-why-tasks-a-k-a-promises-futures/"/>
  <id>http://localhost:4000/2013/11/29/asynchronous-io-in-c-why-tasks-a-k-a-promises-futures</id>
  <published>2013-11-29T00:00:00-05:00</published>
  <updated>2013-11-29T00:00:00-05:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;In previous posts I provided an &lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2013/08/02/asynchronous-io-in-c-introduction/&quot;&gt;introduction to asynchronous I/O in C#&lt;/a&gt;, and also &lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2013/10/29/asynchronous-io-in-c-io-completion-ports/&quot;&gt;dug a bit deeper into I/O completion ports&lt;/a&gt;, which is one of the possible mechanisms that the .NET frameworks uses to accomplish this.&lt;/p&gt;
&lt;p&gt;In this blog post we are going to go over the benefits of using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.tasks.task%28v=vs.110%29.aspx&quot;&gt;Task&lt;/a&gt; abstraction to represent asynchronous operations. Before I get started, I recommend that if you have never watched &lt;a href=&quot;http://www.youtube.com/watch?v=hf1T_AONQJU&quot; target=&quot;_blank&quot;&gt;this video&lt;/a&gt; you should go ahead and do it. Michael Jackson (&lt;a href=&quot;https://twitter.com/mjackson&quot;&gt;@mjackson&lt;/a&gt;) and Domenic Denicola (&lt;a href=&quot;https://twitter.com/domenic&quot;&gt;@domenic&lt;/a&gt;) do a great job explaining the benefits of promises.&lt;/p&gt;
&lt;h2&gt;What are tasks?&lt;/h2&gt;
&lt;p&gt;A Task is an object oriented abstraction that represents an asynchronous operation. It does not carry any special connotation as to how that operation is being performed (see my &lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2013/10/29/asynchronous-io-in-c-io-completion-ports/&quot;&gt;previous post&lt;/a&gt;). The concept of task is similar to the concept of promise or future and, as a matter of fact, in the &lt;a href=&quot;http://blogs.msdn.com/b/pfxteam/archive/2008/06/02/8567093.aspx&quot;&gt;Parallel Extensions CTP the class&#39; original name was Future&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That being said, all of the operations for which the .NET framework now returns a Task used to always be available but were somewhat harder to use. Let&#39;s look at a couple of examples so I can better express what I mean.&lt;/p&gt;
&lt;h2&gt;A walk through history lane (with examples)&lt;/h2&gt;
&lt;p&gt;In the following examples, let&#39;s assume that our goal is to download HTML from a couple of URLs and once both downloads are done we need to do something with the HTML. What we are going to do is compare how the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/jj152938%28v=vs.110%29.aspx&quot;&gt;different proposals for asynchronous programming in .NET&lt;/a&gt; allow you to do this.&lt;/p&gt;
&lt;p&gt;The source code for the samples can be found &lt;a href=&quot;https://github.com/dschenkelman/async-io-talk/tree/master/src/AsynchronousPatterns&quot;&gt;at GitHub&lt;/a&gt;. I have tried to make all samples look similar, which leads to a bit of code duplication, but I think that makes the comparisons simpler. Basically, all samples follow this model:&lt;/p&gt;
&lt;code data-gist-id=&quot;af129e88ebb996f2a152&quot; data-gist-file=&quot;Model.cs&quot;&gt;&lt;/code&gt;
&lt;h3&gt;Asynchronous Programming Model (APM)&lt;/h3&gt;
&lt;p&gt;The first model that the Framework proposed for asynchronous programming was the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms228963%28v=vs.110%29.aspx&quot;&gt;asynchronous programming model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you can see in the code below, we need to add an extra variable to keep track of the amount of pending requests. Additionally, we need to add a lock object to avoid a race condition for downloads that complete at the same time (if you want to try it out just remove the lock and add a Thread.Sleep(10000) after decrementing the pending count). Imagine the work that you would need to do to add error handling…&lt;/p&gt;
&lt;code data-gist-id=&quot;af129e88ebb996f2a152&quot; data-gist-file=&quot;APM.cs&quot;&gt;&lt;/code&gt;
&lt;h3&gt;Event-based asynchronous pattern (EAP)&lt;/h3&gt;
&lt;p&gt;After APM came the &lt;a href=&quot;http://www.google.com.ar/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CC0QFjAA&amp;amp;url=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fwewwczdw%28v%3Dvs.110%29.aspx&amp;amp;ei=N5iYUvnDEqWpsAS3wYGIAQ&amp;amp;usg=AFQjCNFHonNYzGLtuP8u3HhDsUNMWv1k_Q&amp;amp;sig2=JJL0WSiZS-pjY4qrumRfOA&amp;amp;bvm=bv.57155469,d.cWc&quot;&gt;event-based asynchronous pattern&lt;/a&gt;. It&#39;s similar to the APM example, but instead of using callbacks and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.iasyncresult%28v=vs.110%29.aspx&quot;&gt;IAsyncResult&lt;/a&gt; it leverages &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/awbftdfh.aspx&quot;&gt;events&lt;/a&gt;. An interesting addition to this model is the possibility of cancelling a particular asynchronous operation (not shown here, it is just part of the spec).&lt;/p&gt;
&lt;code data-gist-id=&quot;af129e88ebb996f2a152&quot; data-gist-file=&quot;Events.cs&quot;&gt;&lt;/code&gt;
&lt;h3&gt;Task-based asynchronous pattern (TPM)&lt;/h3&gt;
&lt;p&gt;Finally, we get to the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/hh873175%28v=vs.110%29.aspx&quot;&gt;task-based asynchronous pattern&lt;/a&gt;. The relevant parts here are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The usage of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.tasks.task.whenall%28v=vs.110%29.aspx&quot;&gt;Task.WhenAll&lt;/a&gt;, which greatly reduces the amount of code required to get this working, but most importantly makes the intent clear.&lt;/li&gt;
&lt;li&gt;The usage of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd270696%28v=vs.110%29.aspx&quot;&gt;ContinueWith&lt;/a&gt;, which allows you to provide code that does some work when a task finishes and returns a new task that will be completed when the work is done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;I’m not using &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx&quot;&gt;async/await&lt;/a&gt; as I want to focus on Tasks. In a future post, the relationship between tasks and async/await will be covered.&lt;/p&gt;
&lt;code data-gist-id=&quot;af129e88ebb996f2a152&quot; data-gist-file=&quot;Tasks.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;Abstracting APM and EAP with Tasks&lt;/h2&gt;
&lt;p&gt;As I stated at the beginning of the blog post, Tasks represent an abstraction for an asynchronous operation. For that reason, all other programming models can be abstracted using Tasks. I have created a couple of extension methods that do this exact thing. These methods are just meant as an example. If you are going to be doing this for real you should first make sure that the methods &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.net.webrequest.getrequeststreamasync%28v=vs.110%29.aspx&quot;&gt;are not already implemented&lt;/a&gt;, and if that is that case use the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskfactory.fromasync%28v=vs.110%29.aspx&quot;&gt;TaskFactory class&lt;/a&gt;.&lt;/p&gt;
&lt;code data-gist-id=&quot;af129e88ebb996f2a152&quot; data-gist-file=&quot;Extensions.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;With those extensions the APM example is greatly simplified (I won’t show the updated EAP sample, as it looks similar).&lt;/p&gt;
&lt;code data-gist-id=&quot;af129e88ebb996f2a152&quot; data-gist-file=&quot;APMWithExtensions.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;A final example: Cancellation&lt;/h2&gt;
&lt;p&gt;What if we wanted to only carry out work with only the first download that finishes (e.g.: useful when working against multiple CDNs) and also avoid performing unnecessary downloads? Then we have to find a way to execute code once the first Task completes and cancel the other one. The following code does just that (I&#39;m not even going to bother doing this with the other models, it requires a lot more thinking). The key takeaways from the following code are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The usage of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.tasks.task.waitany%28v=vs.110%29.aspx&quot;&gt;Task.WhenAny&lt;/a&gt; to execute the continuation when the task that finishes sooner completes.&lt;/li&gt;
&lt;li&gt;Providing &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.threading.tasks.taskcontinuationoptions%28v=vs.110%29.aspx&quot;&gt;TaskContinuationOptions&lt;/a&gt; for the continuation.&lt;/li&gt;
&lt;li&gt;Providing a cancellation Token for the download tasks and cancelling when the task that finishes sooner completes.&lt;/li&gt;
&lt;/ul&gt;
&lt;code data-gist-id=&quot;af129e88ebb996f2a152&quot; data-gist-file=&quot;Cancellation.cs&quot;&gt;&lt;/code&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/11/29/asynchronous-io-in-c-why-tasks-a-k-a-promises-futures/&quot;&gt;Asynchronous I/O in C#: Why tasks (a.k.a. promises, futures)?&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on November 29, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Asynchronous I/O in C#: I/O Completion Ports]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/10/29/asynchronous-io-in-c-io-completion-ports/"/>
  <id>http://localhost:4000/2013/10/29/asynchronous-io-in-c-io-completion-ports</id>
  <published>2013-10-29T00:00:00-04:00</published>
  <updated>2013-10-29T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;I finally got around to writing this blog post as I feel it has been a personal debt for some time now. After &lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2013/08/02/asynchronous-io-in-c-introduction/&quot;&gt;introducing async I/O in C#&lt;/a&gt;, I spent a lot of time thinking about how to write about the topic of this blog post so let&#39;s jump right into it.&lt;/p&gt;
&lt;h2&gt;What are I/O completion ports?&lt;/h2&gt;
&lt;p&gt;As &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa365198(v=vs.85).aspx&quot;&gt;this article&lt;/a&gt; explains, an I/O Completion Port (IOCP from now on) is a queue-like operating system object that can be used to simultaneously manage multiple I/O operations. This is done by associating multiple &lt;em&gt;file handles&lt;/em&gt; (not necessarily to a file, any asynchronous-able I/O endpoint) to a single IOCP and monitoring it for changes. Whenever an operation on any of the &lt;em&gt;file handles&lt;/em&gt; completes, and I/O completion packet is queued into the IOCP.&lt;/p&gt;
&lt;p&gt;I think the following picture does a better job at explaining the concept:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/10/image3.png&quot;&gt;&lt;img style=&quot;padding-top: 0px;padding-left: 0px;padding-right: 0px;border: 0px&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/10/image_thumb3.png&quot; width=&quot;612&quot; height=&quot;392&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What do they have to do with asynchronous I/O in C#?&lt;/h2&gt;
&lt;p&gt;Underneath the covers, an asynchronous operation could be implemented in many different ways.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The important part about asynchrony is that it is relative to the caller.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That means that one possible alternative could be to actually spin up a new  orker thread and perform a blocking call in it. Although that might not be what we want in every scenario (we are blocking a worker thread, just not the caller&#39;s thread) it is still asynchronous from a caller&#39;s perspective.&lt;/p&gt;
&lt;p&gt;Another alternative that some framework components implement is using IOCP together with completion port threads. I did not know about this before, but &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/3dasc8as.aspx&quot;&gt;ThreadPool&lt;/a&gt; threads can be either worker threads or completion port threads (this is explained with detail in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms973903.aspx&quot;&gt;this article&lt;/a&gt;).  With this approach, the ThreadPool is in charge of monitoring IOCPs and dispatching tasks to completion port threads that are in charge of handling the completion of an operation (also shown in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms973903.aspx&quot;&gt;this article&lt;/a&gt;). How IOCP and the CLR interact is explained with more detail in Chapter 28 of &lt;a href=&quot;http://www.amazon.es/Clr-Via-C-Developer-Reference/dp/0735667454&quot;&gt;CLR via C# 4th Edition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/10/image10.png&quot;&gt;&lt;img style=&quot;padding-top: 0px;padding-left: 0px;padding-right: 0px;border: 0px&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/10/image10_thumb.png&quot; width=&quot;614&quot; height=&quot;320&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some of the benefits of using IOCP are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All I/O operations can be registered to the same completion port object (simplifying the CLRs job).&lt;/li&gt;
&lt;li&gt;We avoid blocking any of our own threads and ThreadPool worker threads.&lt;/li&gt;
&lt;li&gt;We get automatic thread management, which minimizes context switching and gives our main thread more CPU time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Show me some code…&lt;/h2&gt;
&lt;p&gt;The link to the working code is in the samples section (bottom of the post), but this is a high level overview of how you would work with a completion port.&lt;/p&gt;
&lt;p&gt;The first thing to do is create one and store a handle to it.&lt;/p&gt;
&lt;code data-gist-id=&quot;a5f8343f78492397f73b&quot; data-gist-file=&quot;CreatePort.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;After that, whenever you create a &lt;em&gt;file handle&lt;/em&gt; for asynchronous I/O you associate it to the IOCP.&lt;/p&gt;
&lt;code data-gist-id=&quot;a5f8343f78492397f73b&quot; data-gist-file=&quot;CreateFile.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;Finally, whenever you perform an operation you must specify a callback and get a pointer to a &lt;strong&gt;NativeOverlapped*&lt;/strong&gt; structure:&lt;/p&gt;
&lt;code data-gist-id=&quot;a5f8343f78492397f73b&quot; data-gist-file=&quot;Overlapped.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;How is the callback invoked?&lt;/h2&gt;
&lt;p&gt;You might have noticed that the previous code only provides a callback, but it is never actually invoked. This is the role of a separate component, which we are using to simulate a completion port thread:&lt;/p&gt;
&lt;code data-gist-id=&quot;a5f8343f78492397f73b&quot; data-gist-file=&quot;Thread.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;That component is in charge of checking the completion port for queued elements and invoking the related asynchronous callback (and also some cleanup).&lt;/p&gt;
&lt;code data-gist-id=&quot;a5f8343f78492397f73b&quot; data-gist-file=&quot;IOCompletionWorker.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;Samples&lt;/h2&gt;
&lt;p&gt;Together with &lt;a href=&quot;http://blogs.southworks.net/mconverti/&quot;&gt;Mariano Converti&lt;/a&gt; we held a talk some time ago introducing this subject, and created a &lt;a href=&quot;https://github.com/dschenkelman/async-io-talk&quot;&gt;GitHub repo&lt;/a&gt; for the code. Under the source folder you will find three samples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;IOCompletionPorts&lt;/strong&gt;: Shows how to create a completion port from C# code by taking advantage of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.dllimportattribute.aspx&quot;&gt;DllImport&lt;/a&gt;. It gives an idea a high level idea of how things could be implemented underneath the covers (of course the code is nowhere near reusable), and provides a full working sample for the code provided above.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ThreadPoolsSample&lt;/strong&gt;: Shows that asynchronous callbacks are invoked in thread pool threads.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CompletionPortThreadsSample&lt;/strong&gt;:Shows that some asynchronous callbacks are invoked in completion port threads, while others are invoked in worked threads.&lt;/li&gt;
&lt;/ol&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/10/29/asynchronous-io-in-c-io-completion-ports/&quot;&gt;Asynchronous I/O in C#: I/O Completion Ports&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on October 29, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[[Spanish] Webcast Disponible: Arquitectura MVVM para la construcción de aplicaciones Windows Store]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/09/24/spanish-webcast-disponible-arquitectura-mvvm-para-la-construccin-de-aplicaciones-windows-store/"/>
  <id>http://localhost:4000/2013/09/24/spanish-webcast-disponible-arquitectura-mvvm-para-la-construccin-de-aplicaciones-windows-store</id>
  <published>2013-09-24T00:00:00-04:00</published>
  <updated>2013-09-24T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;For those who don’t read Spanish, this blog post provides details about a Spanish speaking webcast that &lt;a href=&quot;http://blogs.southworks.net/dpoza&quot;&gt;Diego Poza&lt;/a&gt; and I presented last week for the MSDN Latin American community.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;La semana pasada junto con mi amigo &lt;a href=&quot;http://blogs.southworks.net/dpoza/&quot;&gt;Diego &quot;Tony&quot; Poza&lt;/a&gt; hicimos un Web Cast en el cual explicamos diferentes formas de crear aplicaciones Windows Store con una arquitectura mantenible y flexible.&lt;/p&gt;
&lt;p&gt;Queremos agradecerles a todos los asistentes, ya que fue una sesión muy interactiva y con muchas preguntas muy interesantes.&lt;/p&gt;
&lt;p&gt;Algunos de los temas que se trataron durante el Web Cast fueron:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cómo tomar ventaja de las PCL (bibliotecas de clases portables).&lt;/li&gt;
&lt;li&gt;Cómo decidir si usar un framework o no.&lt;/li&gt;
&lt;li&gt;Manejo de dependencias de los ViewModels.&lt;/li&gt;
&lt;li&gt;Pruebas unitarias.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Video Online&lt;/h2&gt;
&lt;p&gt;Para los interesados, les dejamos a continuación los detalles del evento y los links para descargar la grabación o verla online:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://msevents.microsoft.com/CUI/EventDetail.aspx?culture=es-AR&amp;amp;EventID=1032559248&amp;amp;CountryCode=AR&quot;&gt;Detalles del evento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www150.livemeeting.com/cc/MSEvents/view?cn=guest&amp;amp;id=1032559247&amp;amp;pw=5823A9B8&quot;&gt;Grabación del evento&lt;/a&gt; (para descargar o ver online)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://es.slideshare.net/DamianSchenkelman/arquitectura-mvvm-para-la-construccin-de-aplicaciones-windows-store&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si tienen alguna otra pregunta pueden contactarnos por twitter (&lt;a href=&quot;https://twitter.com/dschenkelman&quot;&gt;@dschenkelman&lt;/a&gt; y &lt;a href=&quot;https://twitter.com/diegopoza&quot;&gt;@diegopoza&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;A continuación incluyo algunos de los links referenciados utilizados durante la charla:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/es-es/library/vstudio/gg597391(v=vs.110).aspx&quot;&gt;PCL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://prismwindowsruntime.codeplex.com/&quot;&gt;Prism for Win RT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mvvmlight.codeplex.com/&quot;&gt;MVVM Light&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caliburnmicro.codeplex.com/&quot;&gt;Caliburn Micro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dschenkelman/fakewin8&quot;&gt;FakeWin8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/09/24/spanish-webcast-disponible-arquitectura-mvvm-para-la-construccin-de-aplicaciones-windows-store/&quot;&gt;[Spanish] Webcast Disponible: Arquitectura MVVM para la construcción de aplicaciones Windows Store&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on September 24, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Webcast: Modernización de aplicaciones WPF de línea de negocio (spanish)]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/08/19/webcast-modernizacion-de-aplicaciones-wpf-de-linea-de-negocio/"/>
  <id>http://localhost:4000/2013/08/19/webcast-modernizacion-de-aplicaciones-wpf-de-linea-de-negocio</id>
  <published>2013-08-19T00:00:00-04:00</published>
  <updated>2013-08-19T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;font size=&quot;2&quot;&gt;For those who don’t read Spanish, this blog post provides details about an upcoming Spanish speaking webcast for the MSDN Latin American community.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;3&quot;&gt;Este Jueves (22 de Agosto) junto con mi amigo &lt;a href=&quot;http://blogs.southworks.net/mconverti/&quot; target=&quot;_blank&quot;&gt;Mariano Converti&lt;/a&gt; daremos un web cast sobre como utilizar algunas de las últimas tecnologías Microsoft para desarrollar aplicaciones WPF 4.5. Los detalles del evento son:&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;&lt;a href=&quot;https://msevents.microsoft.com/CUI/EventDetail.aspx?EventID=1032559569&amp;amp;Culture=es-AR&amp;amp;community=0&quot; target=&quot;_blank&quot;&gt;Link de inscripción&lt;/a&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;Día: Jueves 22 de Agosto de 2013&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;Horario: 06:00 PM (GMT-3)&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;Duración: 1 hora (aproximadamente)&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;Idioma: Español&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font size=&quot;3&quot;&gt;Entre otras cosas vamos a mostrar como utilizar las siguientes tecnologías para crear aplicaciones de línea de negocio:&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;&lt;a href=&quot;http://www.asp.net/web-api&quot; target=&quot;_blank&quot;&gt;ASP.Net Web API&lt;/a&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;&lt;a href=&quot;http://entityframework.codeplex.com/wikipage?title=specs&quot; target=&quot;_blank&quot;&gt;Entity Framework 6 (beta)&lt;/a&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/data/odata.aspx&quot; target=&quot;_blank&quot;&gt;WCF Data Services (OData)&lt;/a&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font size=&quot;3&quot;&gt;&lt;a href=&quot;http://signalr.net/&quot; target=&quot;_blank&quot;&gt;SignalR&lt;/a&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/es-es/library/vstudio/gg597391(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;Portable Class Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esperamos que puedan asistir!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/08/19/webcast-modernizacion-de-aplicaciones-wpf-de-linea-de-negocio/&quot;&gt;Webcast: Modernización de aplicaciones WPF de línea de negocio (spanish)&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on August 19, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[fakewin8: Configuring valid parameters for fake methods]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/08/06/fakewin8-configuring-valid-parameters-for-fake-methods/"/>
  <id>http://localhost:4000/2013/08/06/fakewin8-configuring-valid-parameters-for-fake-methods</id>
  <published>2013-08-06T00:00:00-04:00</published>
  <updated>2013-08-06T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Yesterday I &lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2013/08/04/fakewin8-easy-fakes-for-windows-store-apps-unit-tests/&quot; target=&quot;_blank&quot;&gt;blogged about fakewin8&lt;/a&gt;, a set of components that leverage code generation to create fake classes, which can be used to simplify unit testing in environments where dynamic proxy generation is not a viable option. If you are developing Windows Store or Windows Phone apps you should take it for a spin to see how it feels like.&lt;/p&gt;
&lt;p&gt;Today’s blog post explains how &lt;a href=&quot;https://github.com/dschenkelman/fakewin8&quot; target=&quot;_blank&quot;&gt;fakewin8&lt;/a&gt; allows you to define valid parameters for fake methods.&lt;/p&gt;
&lt;h2&gt;A bit of context&lt;/h2&gt;
&lt;p&gt;Commonly, when creating unit tests you need to setup constraints for mock method invocations. This is usually done by providing predicates or specific values for the parameters with which a method must be invoked. If these are not met, your test should fail.&lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;https://github.com/dschenkelman/fakewin8&quot; target=&quot;_blank&quot;&gt;fakewin8&lt;/a&gt; you can configure fake methods to only accept invocations that match a certain set of predicates based on its parameters. If an invocation does not match a specified predicate an &lt;code&gt;&lt;span style=&quot;font-family: Consolas&quot;&gt;InvalidInvocationException&lt;/span&gt;&lt;/code&gt; is thrown. To specify constraints for a parameter of type &lt;code&gt;&lt;span style=&quot;font-family: Consolas&quot;&gt;T&lt;/span&gt;&lt;/code&gt;, a predicate of type &lt;code&gt;&lt;span style=&quot;font-family: Consolas&quot;&gt;Func&amp;lt;T, bool&amp;gt;&lt;/span&gt;&lt;/code&gt; must be used. For example:&lt;/p&gt;
&lt;code data-gist-id=&quot;04e749d3d85e0f6b2d71&quot; data-gist-file=&quot;Accept.cs&quot; data-gist-hide-footer=&quot;true&quot; data-gist-highlight-line=&quot;3&quot;&gt;&lt;/code&gt;
&lt;p&gt;For the common scenario where any possible value is acceptable for a particular parameter, you can use &lt;span style=&quot;font-family: Consolas&quot;&gt;Any&amp;lt;T&amp;gt;.IsOK() &lt;/span&gt;which creates a &lt;span style=&quot;font-family: Consolas&quot;&gt;Func&amp;lt;T, bool&amp;gt;&lt;/span&gt; that always returns true:&lt;/p&gt;
&lt;code data-gist-id=&quot;04e749d3d85e0f6b2d71&quot; data-gist-file=&quot;Any.cs&quot; data-gist-hide-footer=&quot;true&quot;&gt;&lt;/code&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/08/06/fakewin8-configuring-valid-parameters-for-fake-methods/&quot;&gt;fakewin8: Configuring valid parameters for fake methods&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on August 06, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[fakewin8: Easy fakes for Windows Store apps unit tests]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/08/04/fakewin8-easy-fakes-for-windows-store-apps-unit-tests/"/>
  <id>http://localhost:4000/2013/08/04/fakewin8-easy-fakes-for-windows-store-apps-unit-tests</id>
  <published>2013-08-04T00:00:00-04:00</published>
  <updated>2013-08-04T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;span style=&quot;font-size: xx-small&quot;&gt;In case you are short in time, here&#39;s the Github link: &lt;/span&gt;&lt;a href=&quot;https://github.com/dschenkelman/fakewin8&quot;&gt;&lt;span style=&quot;font-size: xx-small&quot;&gt;https://github.com/dschenkelman/fakewin8&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: xx-small&quot;&gt;. Otherwise, read on.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;If you are reading this, you probably know that due to the changes in the reflection API, all unit testing libraries that depend on the creation of dynamic proxies do not work in Windows RT (for example &lt;a href=&quot;https://groups.google.com/forum/#!topic/moqdisc/nP5kS_ZNZP0&quot;&gt;Moq&lt;/a&gt;). As someone who does a lot of Windows 8 development and makes heavy use of unit tests, this was something that really changed the way I approach unit testing.&lt;/p&gt;
&lt;p&gt;I’ve seen many different proposals to workaround this issue, such as &lt;a href=&quot;http://outcoldman.com/en/blog/show/332&quot; target=&quot;_blank&quot;&gt;having linked files&lt;/a&gt;, having the components under test in a portable class library (and then using any mocking framework) and using &lt;a href=&quot;http://prismwindowsruntime.codeplex.com/SourceControl/latest#Prism.StoreApps.Tests/Mocks/MockPageViewModel.cs&quot; target=&quot;_blank&quot;&gt;public properties that expose setters for the methods to fake&lt;/a&gt;. While those approaches do work fine (in fact I’ve tried all of them), none of them fully suit my needs. I just did not feel completely comfortable with only one of them.  That’s why I came up with the following.&lt;/p&gt;
&lt;h2&gt;Premises&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;For each interface or base class, I want to create &lt;strong&gt;only one class that can be used as a stub/mock in any test method&lt;/strong&gt;. This means that all methods must be easy to setup with different logic for different unit tests.&lt;/li&gt;
&lt;li&gt;No additional components should be required (i.e.: no portable class libraries, no linked files).&lt;/li&gt;
&lt;li&gt;Method invocations should be automatically tracked so assertions can be performed based on them.&lt;/li&gt;
&lt;li&gt;Fake class generation should be automatic. We want to focus on the tests development, not the fakes development.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Proposal&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dschenkelman/fakewin8&quot;&gt;fakewin8&lt;/a&gt; proposes the usage of classes like &lt;a href=&quot;https://github.com/dschenkelman/fakewin8/blob/master/src/FakeWin8/FakeAction.cs&quot;&gt;FakeAction &lt;/a&gt;and &lt;a href=&quot;https://github.com/dschenkelman/fakewin8/blob/master/src/FakeWin8/FakeFunc.cs&quot;&gt;FakeFunc&lt;/a&gt;, which act as normal &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.action.aspx&quot; target=&quot;_blank&quot;&gt;Action&lt;/a&gt; and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb534960.aspx&quot; target=&quot;_blank&quot;&gt;Func&lt;/a&gt;, but keep track of the number invocations and parameters on each of them.&lt;/p&gt;
&lt;p&gt;For example, for this interface:&lt;/p&gt;
&lt;code data-gist-id=&quot;b476d386055a42b3b637&quot; data-gist-file=&quot;INavigationService.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;The following fake class should be created (and only this class should be required):&lt;/p&gt;
&lt;code data-gist-id=&quot;b476d386055a42b3b637&quot; data-gist-file=&quot;FakeNavigationService.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;The &lt;strong&gt;FakeAction&lt;/strong&gt; and &lt;strong&gt;FakeFunc &lt;/strong&gt;classes (at the moment they support until up to 3 parameters) can be leveraged like this in your unit tests:&lt;/p&gt;
&lt;code data-gist-id=&quot;b476d386055a42b3b637&quot; data-gist-file=&quot;UnitTests.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;Additionally, given the path to an assembly and an output directory, you can automatically generate the fake classes.&lt;/p&gt;
&lt;pre class=&quot;brush: bash;&quot;&gt;FakeWin8.Generator.Console.exe &amp;lt;dllPath&amp;gt; &amp;lt;outputDir&amp;gt;&lt;/pre&gt;
&lt;p&gt;The generated code for the sample interface is the following one (no indentation yet):&lt;/p&gt;
&lt;code data-gist-id=&quot;b476d386055a42b3b637&quot; data-gist-file=&quot;GeneratedFakeNavigationService.cs&quot;&gt;&lt;/code&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/08/04/fakewin8-easy-fakes-for-windows-store-apps-unit-tests/&quot;&gt;fakewin8: Easy fakes for Windows Store apps unit tests&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on August 04, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Asynchronous I/O in C#: Introduction]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/08/02/asynchronous-io-in-c-introduction/"/>
  <id>http://localhost:4000/2013/08/02/asynchronous-io-in-c-introduction</id>
  <published>2013-08-02T00:00:00-04:00</published>
  <updated>2013-08-02T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Last week with &lt;a href=&quot;http://blogs.southworks.net/mconverti&quot; target=&quot;_blank&quot;&gt;Mariano Converti&lt;/a&gt;, we gave the first in a series of presentations related to how asynchronous I/O works in C#. The idea is to start from the low level components that allow asynchronous I/O to take place and to finish with how the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx&quot; target=&quot;_blank&quot;&gt;async/await&lt;/a&gt;&lt;em&gt; &lt;/em&gt;constructs work. As each of the presentations takes place, either Mariano or I will write a blog post summarizing the core concepts and also providing a link to a GitHub repo with all the samples.&lt;/p&gt;
&lt;p&gt;In this introductory post, I would like to go over some of the benefits of using asynchronous I/O together with some of the drawbacks.&lt;/p&gt;
&lt;h2&gt;Why should you care?&lt;/h2&gt;
&lt;p&gt;Simply put:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Asynchronous I/O does not block the thread while performing operations such as disk or network access.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is really important, as there is a huge difference (orders of magnitude) in the access time between accessing main memory and retrieving something from the network as this &lt;a href=&quot;http://serverfault.com/questions/238417/are-networks-now-faster-than-disks&quot; target=&quot;_blank&quot;&gt;Stack Overflow answer explains&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Whenever you perform a synchronous I/O operation the executing thread is idle waiting for the operation to complete. The worse thing is that when waiting for the operation to complete it is doing nothing, &lt;strong&gt;but it cannot perform any other work!&lt;/strong&gt; So in the meantime, if it is a UI thread your UI will be blocked, and if it is a thread from the IIS Thread Pool it won’t be able to process any other requests.&lt;/p&gt;
&lt;h2&gt;An enlightening example&lt;/h2&gt;
&lt;p&gt;Let’s take the following figure as an example (I’m using IIS for the example as the UI blocking one is something all of you have probably seen). The drawing on the left represents an IIS Thread Pool thread that only performs synchronous I/O. The one on the right represents a similar thread, which uses asynchronous I/O.&lt;/p&gt;
&lt;p&gt;Let’s assume that 100 requests come in simultaneously, that we only have one thread to serve all of them and that each request that comes in follows this sequence:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get request and process: 5 ms.&lt;/li&gt;
&lt;li&gt;Read from DB: 490 ms.&lt;/li&gt;
&lt;li&gt;Process and provide response: 5 ms.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The example is really simple, but it does help illustrate a point.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/08/image.png&quot;&gt;&lt;img style=&quot;padding-left: 0px;padding-right: 0px;padding-top: 0px;border: 0px&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/08/image_thumb.png&quot; width=&quot;618&quot; height=&quot;360&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the math is incorrect, please leave a comment and I will fix the error. It’s over 1 AM so I could have made a mistake.&lt;/p&gt;
&lt;p&gt;It is easy to see from the figure that the thread that uses synchronous I/O can only reply to two of those requests in one second.&lt;/p&gt;
&lt;p&gt;On the other hand, the one that takes advantage of asynchronous I/O could reply to all 100 of them.&lt;/p&gt;
&lt;p&gt;Yes, that is 50 times more, which begs the question…&lt;/p&gt;
&lt;h2&gt;Why haven’t you been using this everywhere?&lt;/h2&gt;
&lt;p&gt;Before the &lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx&quot; target=&quot;_blank&quot;&gt;async/await&lt;/a&gt;&lt;/em&gt; constructs were available in C# (which are commonly used together with the Task-based asynchronous pattern or &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/jj152938.aspx&quot; target=&quot;_blank&quot;&gt;TAP&lt;/a&gt;), performing asynchronous I/O required the usage of patterns such as the asynchronous programming model (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms228963.aspx&quot; target=&quot;_blank&quot;&gt;APM&lt;/a&gt;) the event-based asynchronous pattern (&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms228969.aspx&quot; target=&quot;_blank&quot;&gt;EAP&lt;/a&gt;) and the &lt;em&gt;plain&lt;/em&gt; TAP (plain = without &lt;em&gt;async/await&lt;/em&gt;). All of them require coders to split the I/O access code between the instructions prior to the operations and those that deal with the result (either through the use of callbacks, events or continuations). For example, to read contents from a file using the APM you would need code like this:&lt;/p&gt;
&lt;code data-gist-id=&quot;e0f78a13a9298120efd0&quot; data-gist-file=&quot;AsyncMain.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;You can’t deny that the above seems like a bit too much to read the contents from a file. Doesn’t the following blocking code look much cleaner?&lt;/p&gt;
&lt;code data-gist-id=&quot;e0f78a13a9298120efd0&quot; data-gist-file=&quot;SyncMain.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;Well, it does… but is also blocks. Which leads to the following conclusion:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Not all I/O operations &lt;strong&gt;need &lt;/strong&gt;to be asynchronous. Before going for asynchrony, consider what it implies.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;Coming Soon…&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx&quot; target=&quot;_blank&quot;&gt;async/await&lt;/a&gt;&lt;/em&gt; constructs do allow you to write code that looks like the second sample, while getting to keep the benefits of the first one.&lt;/p&gt;
&lt;code data-gist-id=&quot;e0f78a13a9298120efd0&quot; data-gist-file=&quot;ReadFromFile.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;The fact that this constructs are so &lt;span style=&quot;text-decoration: line-through&quot;&gt;magical&lt;/span&gt; powerful means that developers don’t need completely understand how things are working under the hood. Nevertheless, in many scenarios it is important to understand how this operations work in order to take full advantage of them and use them correctly.&lt;/p&gt;
&lt;p&gt;The next blog post, based on the first talk, will deal with a kind of low level component that is heavily used in Windows to support asynchronous I/O: &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa365198(v=vs.85).aspx&quot; target=&quot;_blank&quot;&gt;I/O Completion Ports&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/08/02/asynchronous-io-in-c-introduction/&quot;&gt;Asynchronous I/O in C#: Introduction&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on August 02, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Intro to OWIN talk and a simple IP filtering middleware sample]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/07/17/intro-to-owin-talk-and-a-simple-ip-filtering-middleware-sample/"/>
  <id>http://localhost:4000/2013/07/17/intro-to-owin-talk-and-a-simple-ip-filtering-middleware-sample</id>
  <published>2013-07-17T00:00:00-04:00</published>
  <updated>2013-07-17T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Last week I introduced OWIN during a brown bag talk at Southworks. I’m by no means an expert on the subject, but the reason I decided to do it was that I felt it was very hard for me to find a single blog post/video that provided the information required to understand what OWIN was, why it exists and how it can be used.&lt;/p&gt;
&lt;p&gt;That’s why while preparing the talk I decided to create a &lt;a href=&quot;https://github.com/dschenkelman/owin-talk&quot; target=&quot;_blank&quot;&gt;Github repository&lt;/a&gt; to store the source, slides, demo script and some links in a single, centralized place. Please, head over to the site if you would like to check out the slides or get more context on OWIN, as I won’t be including everything in this post.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/07/image2.png&quot;&gt;&lt;img style=&quot;padding-left: 0px;padding-right: 0px;padding-top: 0px;border-width: 0px&quot; title=&quot;image&quot; alt=&quot;image&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/07/image_thumb2.png&quot; width=&quot;617&quot; height=&quot;352&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also realized that this provides an easy way to share the asset’s once the talk is over, so I’ll probably continue doing this in the future.&lt;/p&gt;
&lt;h2&gt;IP Filtering Middleware&lt;/h2&gt;
&lt;p&gt;As you learned from checking the &lt;a href=&quot;https://github.com/dschenkelman/owin-talk&quot; target=&quot;_blank&quot;&gt;Github project&lt;/a&gt; out, OWIN allows you to setup a pipeline of middleware components that are allowed to inspects, routes, or modifies request and/or response messages. With the goal of providing a simple sample, I used Katana (Microsoft’s implementation of OWIN) to create an IP filtering middleware component. It allows you to provide a simple Func to determine whether a request should be rejected based on the client’s IP address. Of course this is not something that you would use in production, but it gives an idea of the kind of things that can be achieved with OWIN and Katana.&lt;/p&gt;
&lt;code data-gist-id=&quot;7c3b4abaa741d53c8a6c&quot; data-gist-file=&quot;IpFilterMiddleware.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;I also created an extension method that allows you to easily integrate the middleware component into the pipeline:&lt;/p&gt;
&lt;code data-gist-id=&quot;7c3b4abaa741d53c8a6c&quot; data-gist-file=&quot;Extensions.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;Integrating with the pipeline&lt;/h2&gt;
&lt;p&gt;For example, if you wanted to reject requests that are not from a private network nor the local machine you could set things up like this:&lt;/p&gt;
&lt;code data-gist-id=&quot;7c3b4abaa741d53c8a6c&quot; data-gist-file=&quot;Startup.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This is by no means a full intro to OWIN (for that refer to the resources provided in Github), but I hope it provides an initial idea of the kind of things that you can do with OWIN and Katana.&lt;/p&gt;
&lt;p&gt;If you have feedback please let me know.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/07/17/intro-to-owin-talk-and-a-simple-ip-filtering-middleware-sample/&quot;&gt;Intro to OWIN talk and a simple IP filtering middleware sample&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on July 17, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[C# UDP Multicast server and Windows Phone 8 Emulator issue]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/07/06/c-udp-multicast-server-and-windows-phone-8-emulator-issue/"/>
  <id>http://localhost:4000/2013/07/06/c-udp-multicast-server-and-windows-phone-8-emulator-issue</id>
  <published>2013-07-06T00:00:00-04:00</published>
  <updated>2013-07-06T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;This is going to be a short one, but could potentially save someone’s time in the future.&lt;/p&gt;
&lt;p&gt;I spent most of the day trying to find out why some simple C# code that was supposed to send multicast packages through the network (similar to the one provided in &lt;a href=&quot;http://www.jarloo.com/c-udp-multicasting-tutorial/&quot;&gt;this blog post&lt;/a&gt;) was not working when running in my laptop.&lt;/p&gt;
&lt;p&gt;Using Wireshark I was not able to capture any of the packages that should have been travelling across my LAN and after trying a whole lot of things what did the trick was disabling the &lt;em&gt;vEthernet (Internal Ethernet Port Windows Phone Emulator Internal Switch)&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;adapter that is installed with &lt;a href=&quot;http://www.microsoft.com/visualstudio/eng/2013-downloads&quot;&gt;Visual Studio 2013 Preview&lt;/a&gt; as part of the Windows Phone 8 Developer Tools.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/07/06/c-udp-multicast-server-and-windows-phone-8-emulator-issue/&quot;&gt;C# UDP Multicast server and Windows Phone 8 Emulator issue&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on July 06, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[scriptcs TCP client and server Script Pack: ScriptCs.Net]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/06/03/scriptcs-tcp-client-and-server-script-pack-scriptcs-net/"/>
  <id>http://localhost:4000/2013/06/03/scriptcs-tcp-client-and-server-script-pack-scriptcs-net</id>
  <published>2013-06-03T00:00:00-04:00</published>
  <updated>2013-06-03T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Last week, I gave a brown bag talk at Southworks about scriptcs and one of the things I explained in depth were &lt;a href=&quot;http://blog.martindoms.com/2013/05/14/building-scriptcs-script-pack/&quot;&gt;script packs&lt;/a&gt;. If this is the first time you hear about scriptcs be sure to check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;http://github.com/scriptcs/scriptcs&quot;&gt;Github Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;http://scriptcs.net/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hanselman.com/blog/ProjectlessScriptedCWithScriptCSAndRoslyn.aspx&quot;&gt;Hanselman’s blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/scriptcs/scriptcs/wiki&quot;&gt;wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a lot of information out there, and things are moving really fast so there is no sense in writing everything down here as some of it would be deprecated in a couple of months.&lt;/p&gt;
&lt;h2&gt;Script Pack Concept&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Currently&lt;/em&gt;&lt;/strong&gt;, a script pack is a .dll that exposes an object which simplifies interaction with a set of components. To get a better idea of how this works, check out the existing &lt;a href=&quot;https://github.com/scriptcs/scriptcs/wiki/Script-Packs-master-list&quot;&gt;script packs&lt;/a&gt; and the &lt;a href=&quot;https://github.com/scriptcs/scriptcs/wiki/Authoring-script-packs&quot;&gt;tutorials on how to create one&lt;/a&gt;. The reason I say &quot;currently&quot;&lt;strong&gt; &lt;/strong&gt;is that at some point in the near future you will be able to &lt;a href=&quot;https://github.com/scriptcs/scriptcs/issues/238&quot;&gt;create your script packs using .csx script files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As this is one of the best features of scriptcs (in my opinion), since it allows you to get up and running with your favorites libraries in no time, I decided I had to create a simple script pack that will show how to take advantage of it. It seems I did a good job selling it, as my friend Ezequiel Jadib went ahead and created a &lt;a href=&quot;https://github.com/ejadib/scriptcs-azuremediaservices/&quot;&gt;script pack of his own&lt;/a&gt; that allows you to &lt;a href=&quot;http://blogs.southworks.net/ejadib/2013/05/31/enjoy-windows-azure-media-services-in-the-comfort-of-your-own-console/&quot;&gt;interact with Azure Media Services from the scriptcs REPL&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;ScriptCs.Net Script Pack&lt;/h2&gt;
&lt;p&gt;Inspired by &lt;a href=&quot;http://nodejs.org/api/net.html&quot;&gt;node.js net module&lt;/a&gt; I created a script pack that allows you to easily create TCP server and clients, abstracting you from all the complexity of using sockets. For example, to setup a TCP server you can simply write something like:&lt;/p&gt;
&lt;code data-gist-id=&quot;3bd93b01b83b3eac8655&quot; data-gist-file=&quot;sample.csx&quot;&gt;&lt;/code&gt;
&lt;p&gt;I’m only going to include that simple piece of code in this blog post, as the &lt;a href=&quot;https://github.com/dschenkelman/scriptcs-net&quot;&gt;project’s home page&lt;/a&gt; is updated whenever the API changes and I also created a sample that shows you how to setup a &lt;a href=&quot;https://github.com/scriptcs/scriptcs-samples/tree/master/net&quot;&gt;simple chat&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;At the moment I intend to continue adding features as I see fit, but your feedback will definitely be welcome either in the form of PRs or &lt;a href=&quot;https://github.com/dschenkelman/scriptcs-net/issues&quot;&gt;issues&lt;/a&gt;.  Most of the features that will be added are going to be used to implement a multi-user interactive REPL that leverages this script pack for communication and &lt;a href=&quot;http://nuget.org/packages/ScriptCs.Core&quot;&gt;ScriptCs.Core&lt;/a&gt; to interpret the scripts.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/06/03/scriptcs-tcp-client-and-server-script-pack-scriptcs-net/&quot;&gt;scriptcs TCP client and server Script Pack: ScriptCs.Net&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on June 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Taking NDepend 4 Code Query over LINQ for a spin with Needle Container]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/05/25/taking-ndepend-4-code-query-over-linq-for-a-spin-with-needle-container/"/>
  <id>http://localhost:4000/2013/05/25/taking-ndepend-4-code-query-over-linq-for-a-spin-with-needle-container</id>
  <published>2013-05-25T00:00:00-04:00</published>
  <updated>2013-05-25T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Some time ago I blogged (&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2011/02/18/needle-dependency-injection-container-alpha-0-1-version-released/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2011/07/18/needle-container-fluency-and-mapping-types/&quot;&gt;here&lt;/a&gt;) about &lt;a href=&quot;http://needlecontainer.codeplex.com/&quot;&gt;Needle&lt;/a&gt; , a dependency injection container I used to work on when procrastinating. As I’m planning to spend some time working on updates I thought it would be a good idea to use &lt;a href=&quot;http://www.ndepend.com/&quot;&gt;NDepend 4&lt;/a&gt; and get a sense of possible improvements I could tackle before getting to work on the new features.&lt;/p&gt;
&lt;p&gt;I had not used NDepend 4 before (I did have some experience &lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2010/10/22/using-ndepend-to-find-ways-to-improve-an-existing-code-base/&quot;&gt;using previous version of NDepend&lt;/a&gt;) and of course the feature that I found the coolest was &lt;a href=&quot;http://www.ndepend.com/Features.aspx#CQL&quot;&gt;Code Query over LINQ&lt;/a&gt;. The query editor definitely makes things easier for users, as it provides code completion and error description which combined with the fact that you get all the LINQ goodness allows you to create your queries in a really fast and easy manner.&lt;/p&gt;
&lt;p&gt;As soon as I created the NDepend project to go over the solution, the default rule set was compared against my code (and I got 0 &lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;reds&lt;/strong&gt;&lt;/span&gt; &lt;img style=&quot;border-bottom-style: none;border-left-style: none;border-top-style: none;border-right-style: none&quot; class=&quot;wlEmoticon wlEmoticon-smile&quot; alt=&quot;Smile&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/wlEmoticon-smile.png&quot;&gt;). As you can see in the following figure, there are a lot of different categories. I like to think of them as belonging two main areas, those that affect the how clients of my library will interact with it (particularly important for a DI container) and those that affect the code itself (maintainability,&amp;nbsp; dependencies).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/dashboard1.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px;border-left: 0px;padding-left: 0px;padding-right: 0px;border-top: 0px;border-right: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;dashboard&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/dashboard_thumb1.png&quot; width=&quot;610&quot; height=&quot;234&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the first area for example, one of the warnings I got was related to the immutability of property getters. As you can see the rule does a great job of taking advantage of the properties exposed by the query objects by simplifying fairly complex concepts such as state changes with the usage of properties like ChangesObjectState and ChangesTypeState. Another good thing is that it provides an explanation so you can determine whether that violation is something you are OK with or not. In the get_FactoryMethod() case the factory is created lazily so that is a rule violation that I consciously decide to live with.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/immutableGetters1.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px;border-left: 0px;padding-left: 0px;padding-right: 0px;border-top: 0px;border-right: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;immutableGetters&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/immutableGetters_thumb1.png&quot; width=&quot;646&quot; height=&quot;317&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another really important find was related to the invocation of virtual methods in constructors. That is something I don’t usually miss but I my plea is non-guilty as the method was declared in an interface and the class is not supposed to be inherited from. Nevertheless, the discovery is definitely useful as I sealed the class thanks to it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/store.png&quot;&gt;&lt;img style=&quot;border-right-width: 0px;padding-left: 0px;padding-right: 0px;border-top-width: 0px;border-bottom-width: 0px;border-left-width: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;store&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/store_thumb.png&quot; width=&quot;586&quot; height=&quot;409&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the latter area, there are some really useful rules such as one that allows you to find dead methods. As always, you must use a critical judgment when interpreting these results. For example, all the methods that appeared in the list are invoked through reflection (to create generic types dynamically).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/deadmethod1.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px;border-left: 0px;padding-left: 0px;padding-right: 0px;border-top: 0px;border-right: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;deadmethod&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/deadmethod_thumb1.png&quot; width=&quot;645&quot; height=&quot;223&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I haven’t come up with a custom rule I want my code to be compliant with yet, but I still wanted to see how hard it would be to create one. I immediately recalled that my old teammate &lt;a href=&quot;http://blogs.southworks.net/dgeffner/&quot;&gt;Diego Geffner&lt;/a&gt; always used to mention that he worked at a company that enforced a maximum 7 lines per method policy. This is what the rule looks like (I’m more of a LINQ extension methods guy):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/geffnerrule.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px;border-left: 0px;padding-left: 0px;padding-right: 0px;border-top: 0px;border-right: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;geffnerrule&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/05/geffnerrule_thumb.png&quot; width=&quot;557&quot; height=&quot;408&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Amazingly having developed without that rule in mind only 10 out of 240 methods were detected as offenders.&lt;/p&gt;
&lt;p&gt;As you can see the ability to create custom rules using all the power and flexibility of Code Query over LINQ is definitely a tool worth considering to enforce common practices among all developers in a project or company. I believe that the fact that they are easy to write and understand is also a major plus as each team/developer can create their own subset to suit their particular needs, leveraging all their existing LINQ knowledge.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/05/25/taking-ndepend-4-code-query-over-linq-for-a-spin-with-needle-container/&quot;&gt;Taking NDepend 4 Code Query over LINQ for a spin with Needle Container&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on May 25, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[To Arrow Function or not to Arrow Function]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2013/02/08/to-arrow-function-or-not-to-arrow-function/"/>
  <id>http://localhost:4000/2013/02/08/to-arrow-function-or-not-to-arrow-function</id>
  <published>2013-02-08T00:00:00-05:00</published>
  <updated>2013-02-08T00:00:00-05:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;If you have used TypeScript you are probably aware of the compiled outcome of an Arrow Function (section 4.9.2 of the &lt;a href=&quot;http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf&quot;&gt;TypeScript Language Specification&lt;/a&gt;). The idea behind using &lt;strong&gt;() =&amp;gt; {…};&lt;/strong&gt; instead of &lt;strong&gt;function(){…};&lt;/strong&gt; is to have access to the object represented by &lt;em&gt;this&lt;/em&gt; in the outer scope, which is what you would expect when using a C# lambda. Of course this feature is particulalry useful in JavaScript because &lt;a href=&quot;http://es5.github.com/#x10.4.3&quot;&gt;&lt;em&gt;this&lt;/em&gt; holds a reference to the object to which a function was applied or called&lt;/a&gt;, and more often than not the &lt;em&gt;this &lt;/em&gt;inside the function&#39;s &lt;a href=&quot;http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/&quot;&gt;execution context&lt;/a&gt; ends up being different from the one in the outer execution context.&lt;/p&gt;
&lt;p&gt;When using an Arrow Function, TypeScript automatically assigns &lt;em&gt;this &lt;/em&gt;to a separate variable in the outer execution context (called &lt;em&gt;_this),&lt;/em&gt; which can be accessed by the function that results of the compilation of the Arrow Function through its closure. As the previous sentence was probably not the simplest one to digest, take the following TypeScript code snippet as an example:&lt;/p&gt;
&lt;code data-gist-id=&quot;18841f8d7d2b08ab0e92&quot; data-gist-file=&quot;MyClass.ts&quot;&gt;&lt;/code&gt;
&lt;p&gt;The resulting JavaScript is:&lt;/p&gt;
&lt;code data-gist-id=&quot;18841f8d7d2b08ab0e92&quot; data-gist-file=&quot;MyClass.js&quot;&gt;&lt;/code&gt;
&lt;p&gt;As you can see, partialAdd stores &lt;em&gt;this &lt;/em&gt;in the local &lt;em&gt;_this&lt;/em&gt; variable which is accessible from the function that is returned through its closure. On the other hand, partialAdd2 uses &lt;em&gt;this &lt;/em&gt;as the variable, but as I mentioned before &lt;em&gt;this&lt;/em&gt; might not be &quot;an instance of MyClass&quot; but something completely different instead.&lt;/p&gt;
&lt;h2&gt;Complex Cases&lt;/h2&gt;
&lt;p&gt;You could (wrongly) deduce that every time you need access to the outer &lt;em&gt;this&lt;/em&gt; inside the function you should use an Arrow Function, but what if you need to use both the outer &lt;em&gt;this &lt;/em&gt;and the object on which the function was applied? That could be a usual situation in an event handler, &lt;a href=&quot;http://api.jquery.com/click/&quot;&gt;which applies the callback functions to the target DOM elements when handling the event&lt;/a&gt; (for the sake of the example assume that there is no way to other way to access the DOM element other than &lt;em&gt;this&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;In these cases, it is important to understand what the compiler is doing underneath the hood. The two common approaches that would lead to errors are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Using an Arrow Function:&lt;/strong&gt; this would cause TypeScript&#39;s &lt;em&gt;this &lt;/em&gt;to shadow the compiled JavaScript&#39;s &lt;em&gt;this&lt;/em&gt;, not allowing you to access the DOM elements that was clicked inside the click handler.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using a function literal: &lt;/strong&gt;this would cause the outer &lt;em&gt;this&lt;/em&gt; to not be accessible, which is unexpected for developers used to C#.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Answer&lt;/h2&gt;
&lt;p&gt;One possible (and simple) solution to this is the usual workaround (&lt;em&gt;that = this&lt;/em&gt;):&lt;/p&gt;
&lt;code data-gist-id=&quot;18841f8d7d2b08ab0e92&quot; data-gist-file=&quot;MyClass2.ts&quot;&gt;&lt;/code&gt;
&lt;p&gt;The following figures show that TypeScript&#39;s type inference system confirms the comments from the previous code snippet:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;this can be an instance of any type, as it depends on the object on which the function was called&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/02/image2.png&quot;&gt;&lt;img style=&quot;padding-left: 0px;padding-right: 0px;padding-top: 0px;border: 0px&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/02/image_thumb2.png&quot; border=&quot;0&quot; alt=&quot;image&quot; width=&quot;494&quot; height=&quot;247&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;that is an instance of MyClass&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2013/02/image3.png&quot;&gt;&lt;img style=&quot;padding-left: 0px;padding-right: 0px;padding-top: 0px;border: 0px&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2013/02/image_thumb3.png&quot; border=&quot;0&quot; alt=&quot;image&quot; width=&quot;502&quot; height=&quot;247&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is not a complex issue, but is one that I&#39;ve seen a couple of times while working with TypeScript, so hopefully if you ever run into it you will be able to solve it in no time.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2013/02/08/to-arrow-function-or-not-to-arrow-function/&quot;&gt;To Arrow Function or not to Arrow Function&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on February 08, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Creating Indexes via Data Annotations with Entity Framework 5.0]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2012/08/18/creating-indexes-via-data-annotations-with-entity-framework-5-0/"/>
  <id>http://localhost:4000/2012/08/18/creating-indexes-via-data-annotations-with-entity-framework-5-0</id>
  <published>2012-08-18T00:00:00-04:00</published>
  <updated>2012-08-18T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;This week, for a project at Southworks, my friend &lt;a href=&quot;http://blogs.southworks.net/mconverti/&quot;&gt;Mariano Converti&lt;/a&gt; and I had to create indexes in a SQL database for two string type properties of entities that were part of an &lt;a href=&quot;http://weblogs.asp.net/scottgu/archive/2010/07/16/code-first-development-with-entity-framework-4.aspx&quot;&gt;Entity Framework Code First&lt;/a&gt; model. As we were also required to support changes to the model after the application was deployed, we decided to use &lt;a href=&quot;http://blogs.msdn.com/b/adonet/archive/2012/02/09/ef-4-3-code-based-migrations-walkthrough.aspx&quot;&gt;Entity Framework Code Base Migrations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This approach successfully satisfied our requirements, but it required us to add additional migrations to specify the indexes. Thus, I started to research to see if there where other ways to do this, thinking that there was probably an available data annotation to get this done. To my surprise, I wasn&#39;t able to find such an attribute when searching the web (for example, this is the list of &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.aspx&quot;&gt;available Data Annotations&lt;/a&gt;). Once I realized this, I decided to create the necessary components on my own.&lt;/p&gt;
&lt;table style=&quot;border:1px&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Update: &lt;/strong&gt;After a quick twitter discussion with &lt;a href=&quot;http://thedatafarm.com/blog/&quot;&gt;@julielerman&lt;/a&gt;, I decided to be more specific as to why I think using an attribute is better than code first migrations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Code first migrations create a class per migration which results in too many classes. While developing your model changes a lot, so having to create an extra class whenever you discover that you want to add an index is not really confortable (once you have deployed to production however, migrations are probably the way to go).&lt;/li&gt;
&lt;li&gt;Attributes are more descriptive. By just looking at the entity you can determine the indexes that will be created for it, without the need to check a separate class&#39; code.&lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Creating the components&lt;/h2&gt;
&lt;p&gt;I found a couple of StackOverflow questions (&lt;a href=&quot;http://stackoverflow.com/questions/4995642/add-index-with-entity-framework-code-first-ctp5&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://stackoverflow.com/questions/8262590/entity-framework-code-first-fluent-api-adding-indexes-to-columns&quot;&gt;here&lt;/a&gt;) from where I got some really useful ideas, such as using the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.entity.database.executesqlcommand%28VS.103%29.aspx&quot;&gt;ExecuteSqlCommand&lt;/a&gt; method introduced in Entity Framework 4.1 and detecting the attributes in a &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/gg696323%28VS.103%29.aspx&quot;&gt;DataBaseInitializer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The attribute code is really simple. It forces you to define the index name and gives the possibility of specifying whether the index is unique or not.&lt;/p&gt;
&lt;code data-gist-id=&quot;22a6758fdf6818b26702&quot; data-gist-file=&quot;IndexAttribute.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;And the Initializer basically goes through the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/gg696460%28VS.103%29.aspx&quot;&gt;DbSet&amp;lt;&amp;gt;&lt;/a&gt; properties in the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext%28VS.103%29.aspx&quot;&gt;DbContext&lt;/a&gt; to retrieve the entity table names and check for the Index attribute in the properties in those entities.&lt;/p&gt;
&lt;code data-gist-id=&quot;22a6758fdf6818b26702&quot; data-gist-file=&quot;IndexInitializer.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;Trying it out&lt;/h2&gt;
&lt;p&gt;I created a simple console application and ran a couple of tests to see if the data base was correctly created. For example, when using the following entity:&lt;/p&gt;
&lt;code data-gist-id=&quot;22a6758fdf6818b26702&quot; data-gist-file=&quot;Customer.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;The following table is created.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2012/08/image.png&quot;&gt;&lt;img style=&quot;margin: 0px;padding-left: 0px;padding-right: 0px;padding-top: 0px;border-width: 0px&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2012/08/image_thumb.png&quot; border=&quot;0&quot; alt=&quot;image&quot; width=&quot;244&quot; height=&quot;196&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If, for example the Table and Column name are customized:&lt;/p&gt;
&lt;code data-gist-id=&quot;22a6758fdf6818b26702&quot; data-gist-file=&quot;CustomerTable.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;We get the following index:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2012/08/image1.png&quot;&gt;&lt;img style=&quot;padding-left: 0px;padding-right: 0px;padding-top: 0px;border-width: 0px&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2012/08/image_thumb1.png&quot; border=&quot;0&quot; alt=&quot;image&quot; width=&quot;425&quot; height=&quot;214&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What if I already have an Initializer?&lt;/h2&gt;
&lt;p&gt;Well, in this case, a simple approach would be to add the IndexInitializer logic to your own Initializer, but that is not the only way to support the IndexAttribute and keep your initialization logic. During the week I also put together a simple CompositeDatabaseInitializer that can be used to separate the logic in different initializers. You could, for instance, have the IndexInitializer and another one to generate data.&lt;/p&gt;
&lt;code data-gist-id=&quot;22a6758fdf6818b26702&quot; data-gist-file=&quot;CompositeDatabaseInitializer.cs&quot;&gt;&lt;/code&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;There are a lot of improvement opportunities for this implementation (such as adding support for clustered indexes). Nevertheless, features such as support for custom database initializers and the ability to execute SQL statements from the DbContext provide really powerful extensibility capabilities.&lt;/p&gt;
&lt;p&gt;I hope that you can either use the code as is or take some useful ideas out of it.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2012/08/18/creating-indexes-via-data-annotations-with-entity-framework-5-0/&quot;&gt;Creating Indexes via Data Annotations with Entity Framework 5.0&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on August 18, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Microsoft Media Platform Video Editor (former RCE) 2.0 just released]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2011/10/03/microsoft-media-platform-video-editor-former-rce-2-0-just-released/"/>
  <id>http://localhost:4000/2011/10/03/microsoft-media-platform-video-editor-former-rce-2-0-just-released</id>
  <published>2011-10-03T00:00:00-04:00</published>
  <updated>2011-10-03T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;Today, the new version of the Microsoft Media Platform (MMP) Video Editor &lt;a href=&quot;http://archive.msdn.microsoft.com/VideoEditor/Release/ProjectReleases.aspx?ReleaseId=5763&quot;&gt;was released&lt;/a&gt; to the public. The new release is based on Silverlight 5, and has a lot (really a lot!) of new features (fully listed below), such as a UI based on floating windows, and a new Sub-Clip tool which gives editors more control when creating clips.&lt;/p&gt;
&lt;p&gt;You can play with the new version at &lt;a href=&quot;http://videoeditor.cloudapp.net/&quot;&gt;http://videoeditor.cloudapp.net/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The downloadable packages of the new release are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MMP Video Editor 2.0 Source Code:&lt;/strong&gt; Useful in case you want to know how the different features are implemented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MMP Video Editor 2.0 Binaries:&lt;/strong&gt; If you don’t care about the source and just can’t wait to host it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MMP Video Editor 2.0 Documentation:&lt;/strong&gt; Updated documentation, including the &lt;strong&gt;“New Features in the MMP Video Editor 2.0” &lt;/strong&gt;that provides a brief overview of the brand new features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MMP Video Editor 2.0 Overlays &amp;amp; Rubberbanding Plugin Sample:&lt;/strong&gt; Two plug-ins for the &quot;Microsoft Media Platform Player Framework (formerly SMF)&quot; were created to manage overlays and rubber-banding in CSMs (see new features document). The sample includes the source code for the plug-ins and a sample player that showcases the plug-ins’ capabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2011/10/image2.png&quot;&gt;&lt;img style=&quot;padding-left: 0px;padding-right: 0px;padding-top: 0px;border: 0px&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2011/10/image_thumb2.png&quot; border=&quot;0&quot; alt=&quot;image&quot; width=&quot;333&quot; height=&quot;211&quot; /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2&gt;New Features&lt;/h2&gt;
&lt;p&gt;The full list of new features included in this version are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Silverlight 5 based&lt;/li&gt;
&lt;li&gt;Out-of-Browser capabilities&lt;/li&gt;
&lt;li&gt;Floating Windows&lt;/li&gt;
&lt;li&gt;Playback Model: CSM Based&lt;/li&gt;
&lt;li&gt;Multiple Sequences&lt;/li&gt;
&lt;li&gt;Sub-clip Tool
&lt;ul&gt;
&lt;li&gt;Asset Preview&lt;/li&gt;
&lt;li&gt;Multiple Video Cameras selection&lt;/li&gt;
&lt;li&gt;Multiple Audio Tracks selection&lt;/li&gt;
&lt;li&gt;Metadata Support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiple clips selection and locking&lt;/li&gt;
&lt;li&gt;Enhanced Overlays Support&lt;/li&gt;
&lt;li&gt;Markers and Ads Browser&lt;/li&gt;
&lt;li&gt;Rubber banding and multiple audio tracks&lt;/li&gt;
&lt;li&gt;Keyboard Layout Configuration&lt;/li&gt;
&lt;li&gt;Jog wheel support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2011/10/image1.png&quot;&gt;&lt;img style=&quot;padding-left: 0px;padding-right: 0px;padding-top: 0px;border: 0px&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2011/10/image_thumb1.png&quot; border=&quot;0&quot; alt=&quot;image&quot; width=&quot;657&quot; height=&quot;325&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I recommend you to go over the new features document before you start editing clips, as there are a lot changes in most of the major features of the application.&lt;/p&gt;
&lt;p&gt;If you have comments, questions, suggestions or any issue, please visit the &lt;a href=&quot;http://archive.msdn.microsoft.com/VideoEditor&quot;&gt;MMP Video Editor community site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We hope enjoy this new version and have a lot of fun editing!!!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2011/10/03/microsoft-media-platform-video-editor-former-rce-2-0-just-released/&quot;&gt;Microsoft Media Platform Video Editor (former RCE) 2.0 just released&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on October 03, 2011.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Needle Container: Fluency and Mapping Types]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2011/07/18/needle-container-fluency-and-mapping-types/"/>
  <id>http://localhost:4000/2011/07/18/needle-container-fluency-and-mapping-types</id>
  <published>2011-07-18T00:00:00-04:00</published>
  <updated>2011-07-18T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/2011/02/18/needle-dependency-injection-container-alpha-0-1-version-released/&quot;&gt;Back in February&lt;/a&gt;, I blogged about &lt;a href=&quot;http://needlecontainer.codeplex.com/&quot;&gt;Needle&lt;/a&gt;, a dependency injection container that I was developing. In that post, I listed some of the most relevant features Needle has, one of them being its Fluent API. I thought it would be a would idea to talk about Needle again, but this time sharing some code and ideas behind it.&lt;/p&gt;
&lt;h3&gt;First things first, why do I want fluency?&lt;/h3&gt;
&lt;p&gt;This is of course a matter of appreciation, but I personally relate fluency to both ease of use and readability. Interestingly enough one of them is important before writing the code, and the other one after doing so. The idea is that a fluent API will give you a small set of options when performing a particular operation, each of them will be presented at the correct moment, and that once the code has been written, you can explain it to your non-tech grandma.&lt;/p&gt;
&lt;h3&gt;Our fluent scenario, mapping types&lt;/h3&gt;
&lt;p&gt;A really common operation that needs to be performed when working with DI containers is mapping types, which involves configuring the container to determine the type you want to get when requesting another type. This is commonly used by mapping an interface to a concrete implementation.&lt;/p&gt;
&lt;p&gt;Let’s say we have an &lt;strong&gt;IForceEnlightened&lt;/strong&gt; interface, and a &lt;strong&gt;Jedi&lt;/strong&gt; class which implements that interface. If we wanted to get a &lt;strong&gt;Jedi&lt;/strong&gt; whenever we request an instance of &lt;strong&gt;IForceEnlightened &lt;/strong&gt;from the container, we can write the following code:&lt;/p&gt;
&lt;code data-gist-id=&quot;5f417134279a7e3f584d&quot; data-gist-file=&quot;Sample.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;One really important thing about the fluent API is that, in every step of the way, IntelliSense only shows us the relevant members:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2011/07/image.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px;border-left: 0px;padding-left: 0px;padding-right: 0px;border-top: 0px;border-right: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2011/07/image_thumb.png&quot; width=&quot;440&quot; height=&quot;253&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2011/07/image1.png&quot;&gt;&lt;img style=&quot;border-bottom: 0px;border-left: 0px;padding-left: 0px;padding-right: 0px;border-top: 0px;border-right: 0px;padding-top: 0px&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2011/07/image_thumb1.png&quot; width=&quot;530&quot; height=&quot;188&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Transactional Operations&lt;/h3&gt;
&lt;p&gt;The Commit() method call might have caught your eye in the previous code sample. This call is necessary, because Needle uses a transactional operation model. When performing a configuration operation with Needle, a committable object is created, which you must commit back to the container for the operation to take place. &lt;/p&gt;
&lt;p&gt;This can also be useful in situations where you need to perform a certain configuration in a component, but want to wait until that configuration takes place. In this cases, keeping a reference to the &lt;strong&gt;ICommitable&lt;/strong&gt; object until you want the configuration to take place does the trick.&lt;/p&gt;
&lt;h3&gt;Each thing by its own name&lt;/h3&gt;
&lt;p&gt;Let’s say we have another scenario, in which we could need either a Jedi or a Sith when requesting a force enlightened subject. In this case, the following code would do the trick:&lt;/p&gt;
&lt;code data-gist-id=&quot;5f417134279a7e3f584d&quot; data-gist-file=&quot;Naming.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;&lt;font face=&quot;Helvetica&quot;&gt;After that the container will have both mappings, which can be injected into another component using, for example, &lt;a href=&quot;http://needlecontainer.codeplex.com/wikipage?title=Constructor%20Injection&amp;amp;referringTitle=Documentation&quot;&gt;Constructor&lt;/a&gt; or &lt;a href=&quot;http://needlecontainer.codeplex.com/wikipage?title=Property%20Injection&amp;amp;referringTitle=Documentation&quot;&gt;Property&lt;/a&gt; injection.&lt;/font&gt;&lt;/p&gt;
&lt;h3&gt;Lifetime Management&lt;/h3&gt;
&lt;p&gt;In case we want to get the same Jedi instance each time we request a force enlightened subject, we can change the default lifetime registration from Transient (a different instance each time we request an &lt;strong&gt;IForceEnlightened&lt;/strong&gt; subject)&amp;#160; to Singleton (returns the same instance every time).&lt;/p&gt;
&lt;code data-gist-id=&quot;5f417134279a7e3f584d&quot; data-gist-file=&quot;Lifetime.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;Singleton registrations are commonly used with services in most applications.&lt;/p&gt;
&lt;h3&gt;Putting it all together&lt;/h3&gt;
&lt;p&gt;Of course, we can both name and determine the scope of a registration. If we want fast and simple access to Master Yoda (and who doesn’t), we can name the mapping and set its lifetime to Singleton:&lt;/p&gt;
&lt;code data-gist-id=&quot;5f417134279a7e3f584d&quot; data-gist-file=&quot;Everything.cs&quot;&gt;&lt;/code&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;I hope you found this post fun, and that you try out Needle and its fluent API sometime. You can download Needle from &lt;a href=&quot;http://needlecontainer.codeplex.com/releases/view/60894&quot;&gt;here&lt;/a&gt; or through Nuget:&lt;/p&gt;
&lt;pre class=&quot;brush: csharp;&quot;&gt;PM&amp;gt; Install-Package NeedleContainer&lt;/pre&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2011/07/18/needle-container-fluency-and-mapping-types/&quot;&gt;Needle Container: Fluency and Mapping Types&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on July 18, 2011.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Binding to View Model properties in Data Templates. The RootBinding Markup Extension]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2011/06/26/binding-to-view-model-properties-in-data-templates-the-rootbinding-markup-extension/"/>
  <id>http://localhost:4000/2011/06/26/binding-to-view-model-properties-in-data-templates-the-rootbinding-markup-extension</id>
  <published>2011-06-26T00:00:00-04:00</published>
  <updated>2011-06-26T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;If you work with Silverlight and MVVM, you must have probably been forced to do some weird thing to bind to a property in your view model (say a Command) from a DataTemplate. Some of the common approaches I have seen and used myself are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using some kind of binding helper as a View’s resource.&lt;/li&gt;
&lt;li&gt;Having a View Model wrap the entity of each collection item, and add the command to the View Model.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although these are perfectly valid approaches, they require extra work compared to the good old {Binding} syntax we are all used to.&lt;/p&gt;
&lt;p&gt;Now that Silverlight 5 Beta is out, we can take advantage of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.windows.markup.markupextension(VS.96).aspx&quot;&gt;XAML Markup Extensions&lt;/a&gt; to help is in this kind of tasks, using a simpler and more intuitive approach.&lt;/p&gt;
&lt;p&gt;I have created a &lt;strong&gt;RootBindingExtension&lt;/strong&gt;, which can be used as follows:&lt;/p&gt;
&lt;code data-gist-id=&quot;714725b67ed06edb2436&quot; data-gist-file=&quot;Usage.xaml&quot;&gt;&lt;/code&gt;
&lt;p&gt;The &lt;strong&gt;RootBindingExtension &lt;/strong&gt;uses the &lt;strong&gt;Path&lt;/strong&gt; property to create a Binding that binds to a property of that name in the View’s &lt;strong&gt;DataContext&lt;/strong&gt;.&lt;/p&gt;
&lt;code data-gist-id=&quot;714725b67ed06edb2436&quot; data-gist-file=&quot;RootBindingExtension.cs&quot;&gt;&lt;/code&gt;
&lt;p&gt;You can download the RootBindingExtension and a sample that uses it from &lt;a href=&quot;https://skydrive.live.com/#!/?cid=09f63fc7ac065e5e&amp;amp;sc=documents&amp;amp;nl=1&amp;amp;uc=2&amp;amp;id=9F63FC7AC065E5E%21215&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let me know if you have used it.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2011/06/26/binding-to-view-model-properties-in-data-templates-the-rootbinding-markup-extension/&quot;&gt;Binding to View Model properties in Data Templates. The RootBinding Markup Extension&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on June 26, 2011.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Microsoft Media Platform Video Editor SP2 Released]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/2011/06/01/microsoft-media-platform-video-editor-sp2-released/"/>
  <id>http://localhost:4000/2011/06/01/microsoft-media-platform-video-editor-sp2-released</id>
  <published>2011-06-01T00:00:00-04:00</published>
  <updated>2011-06-01T00:00:00-04:00</updated>
  <author>
    <name>Damian Schenkelman</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">&lt;p&gt;On Monday, Microsoft released the &lt;a href=&quot;http://archive.msdn.microsoft.com/VideoEditor/Release/ProjectReleases.aspx?ReleaseId=5312&quot;&gt;Service Pack 2&lt;/a&gt; version of the &lt;a href=&quot;http://archive.msdn.microsoft.com/VideoEditor&quot;&gt;Microsoft Media Platform Video Editor&lt;/a&gt; (formerly known as RCE).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.southworks.net/dschenkelman/files/2011/06/image.png&quot;&gt;&lt;img style=&quot;padding-left: 0px;padding-right: 0px;padding-top: 0px;border: 0px&quot; src=&quot;http://blogs.southworks.net/dschenkelman/files/2011/06/image_thumb.png&quot; border=&quot;0&quot; alt=&quot;image&quot; width=&quot;576&quot; height=&quot;273&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This version includes all the &lt;a href=&quot;http://blogs.southworks.net/ejadib/2011/01/14/silverlight-rough-cut-editor-sp1-released/&quot;&gt;new features and bug fixes that were included in SP1&lt;/a&gt;, an important fix for an issue that occurs when playing live smooth streaming videos and a minor fix in the &lt;a href=&quot;http://blogs.southworks.net/ejadib/2010/05/27/composite-stream-manifest-csm-generator-rough-cut-editor-rce/&quot;&gt;Composite Stream Manifest generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Full descriptions of the issues are provided below in case you have run into them.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Issues Description&lt;/strong&gt;&lt;/h2&gt;
&lt;h5&gt;&lt;strong&gt;Live Smooth Streaming Videos without text tracks fails on playback&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;When playing a live smooth streaming video without any text tracks, a message is shown explaining that the video can&#39;t be played.&lt;br /&gt;
The log has the following related entry: &lt;em&gt;&quot;Exception: Failed to parse manifest: Index was out of range. Must be non-negative and less than the size of the collection.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;First chunk duration are not generated sometimes&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;In some scenarios, the duration of the first chunk of the video and audio streams is not generated.&lt;/p&gt;
&lt;p&gt;The error message when playing the generated CSM is the following: &lt;em&gt;&quot;&lt;/em&gt;&lt;em&gt;Caught exception trying to parse main manifest: First audio chunk in clip 1 [start time = &lt;strong&gt;X&lt;/strong&gt;, duration = &lt;strong&gt;Y&lt;/strong&gt;] does not contain clip start position &lt;strong&gt;Z&lt;/strong&gt;]&lt;em&gt;&quot;, &lt;/em&gt;&lt;/em&gt;where X, Y and Z are values that depend on your clips. For more information on common issues when generating and using CSMs, please check this&lt;a href=&quot;http://blogs.southworks.net/ejadib/2010/02/05/common-mistakes-issues-when-creating-and-using-composite-stream-manifests-csm/&quot;&gt; blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hopefully, you will find this new release useful.&lt;/p&gt;
&lt;p&gt;If you have comments, questions, suggestions or any issue, please visit the &lt;a href=&quot;http://archive.msdn.microsoft.com/VideoEditor&quot;&gt;MMP Video Editor community site&lt;/a&gt;.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/2011/06/01/microsoft-media-platform-video-editor-sp2-released/&quot;&gt;Microsoft Media Platform Video Editor SP2 Released&lt;/a&gt; was originally published by Damian Schenkelman at &lt;a href=&quot;http://localhost:4000&quot;&gt;A sea of code&lt;/a&gt; on June 01, 2011.&lt;/p&gt;</content>
</entry>

</feed>
